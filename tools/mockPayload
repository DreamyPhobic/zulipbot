#!/usr/bin/env node

const inquirer = require("inquirer");
const client = require("../src/client.js");

let username;
let number;
let payload;
let pullRequest;
let issue;

inquirer.prompt({
  type: "input", name: "username", message: "What's your GitHub username?"
}).then((response) => {
  username = response.username;
  return client.repos.get({
    owner: "zulipbot-testing", repo: username
  });
}).catch(() => {
  console.log("You don't have a repository on zulipbot-testing yet!",
    "Please make one before running this tool again.");
  process.exit(0);
}).then(() => {
  return inquirer.prompt([
    {
      type: "list", name: "payload", message: "What's your payload type?",
      choices: ["Issue", "Pull request"]
    },
    {
      type: "input", name: "number", message: "What is its number?",
      validate: (value) => {
        return /^\d+$/.test(value) || "Please enter a valid number!";
      }
    }
  ]);
}).then((response) => {
  number = response.number;
  payload = response.payload;
  return client.issues.get({
    owner: "zulipbot-testing", repo: username, number: number
  });
}).catch(() => {
  console.log("That was an invalid issue/pull request number!",
    "Please create an issue/pull request in your repository with the same number and try again.");
  process.exit(0);
}).then((response) => {
  issue = response.data;
  return client.pullRequests.get({
    owner: "zulipbot-testing", repo: username, number: number
  });
}).catch(() => {
  if (payload === "Pull request") {
    console.log("That was an invalid pull request number; it was an issue number!",
      "Please select the 'Issue' option next time.");
    process.exit(0);
  }
  return issueOptions(username, issue);
}).then((response) => {
  if (payload === "Issue" && response) {
    console.log("That was an invalid issue number; it was a pull request number!",
      "Please select the 'Pull request' option next time.");
    return process.exit(0);
  } else if (payload === "Pull request" && response) {
    pullRequest = response.data;
    pullRequestOptions(username, pullRequest);
  }
});

function issueOptions(username, issue) {
  inquirer.prompt([
    {
      type: "list", name: "action", message: "What is the payload action?",
      choices: [
        "Issue opened (opened)",
        "Issue comment created (created)",
        "Issue labeled (labeled)",
        "Issue reopened (reopened)",
        "Issue closed (closed)"
      ]
    },
    {
      type: "input", name: "comment",
      message: "Enter the comment body:",
      when: (answers) => {
        return answers.action === "Issue comment created (created)";
      }
    },
    {
      type: "input", name: "commenter",
      message: "Enter the username of the user that created the comment:",
      when: (answers) => {
        return answers.action === "Issue comment created (created)";
      }
    },
    {
      type: "input", name: "label", message: "Enter the added label name:",
      when: (answers) => {
        return answers.action === "Issue labeled (labeled)";
      }
    }
  ]).then((response) => {
    const action = response.action.match(/\(([^)]+)\)/)[1];
    const payload = {
      action: action,
      issue: issue,
      repository: {
        owner: {
          login: "zulipbot-testing"
        },
        name: username
      },
      comment: response.comment ? {
        body: response.comment,
        user: {
          login: response.commenter
        }
      } : null,
      sender: {
        login: response.comment ? response.commenter : username
      }
    };
    const event = response.comment ? "issue_comment" : "issues";
    client.events.get(event).run(client, payload);
    console.log("Payload sent! Check ",
      `https://github.com/zulipbot-testing/${username}/issues/${number} for any responses.`);
  });
}

function pullRequestOptions(username, pullRequest) {
  inquirer.prompt({
    type: "list", name: "payloadType",
    message: "What type of event do you want to mock?",
    choices: [
      "GitHub webhook",
      "Travis webhook"
    ]
  }).then((response) => {
    if (response.payloadType.includes("Travis")) return travisOptions(username);
    return inquirer.prompt([
      {
        type: "list", name: "action", message: "What is the payload action?",
        choices: [
          "Pull request opened (opened)",
          "Pull request comment created (created)",
          "Pull request synchronized (synchronize)",
          "Pull request review submitted (submitted)",
          "Pull request labeled (labeled)",
          "Pull request reopened (reopened)",
          "Pull request closed (closed)"
        ]
      },
      {
        type: "input", name: "review",
        message: "Enter the username of the user that submitted the review:",
        when: (answers) => {
          return answers.action === "Pull request review submitted (submitted)";
        }
      },
      {
        type: "input", name: "comment",
        message: "Enter the comment body:",
        when: (answers) => {
          return answers.action === "Pull request comment created (created)";
        }
      },
      {
        type: "input", name: "commenter",
        message: "Enter the username of the user that created the comment:",
        when: (answers) => {
          return answers.action === "Pull request comment created (created)";
        }
      },
      {
        type: "input", name: "label", message: "Enter the added label name:",
        when: (answers) => {
          return answers.action === "Pull request labeled (labeled)";
        }
      }
    ]);
  }).then((response) => {
    const action = response.action.match(/\(([^)]+)\)/)[1];
    if (action === "created") {
      const payload = {
        action: action,
        issue: issue,
        repository: {
          owner: {
            login: "zulipbot-testing"
          },
          name: username
        },
        comment: {
          body: response.comment,
          user: {
            login: response.commenter
          }
        },
        sender: {
          login: response.commenter
        }
      };
      client.events.get("issue_comment").run(client, payload);
      return console.log("Payload sent! Check ",
        `https://github.com/zulipbot-testing/${username}/pull/${number} for any responses.`);
    }
    const payload = {
      action: action,
      pull_request: pullRequest,
      repository: {
        owner: {
          login: "zulipbot-testing"
        },
        name: username
      },
      label: response.label ? {
        name: response.label
      } : null,
      review: response.review ? {
        user: {
          login: response.review
        }
      } : null
    };
    client.events.get("pull_request").run(client, payload);
    console.log("Payload sent! Check ",
      `https://github.com/zulipbot-testing/${username}/pull/${number} for any responses.`);
  });
}

function travisOptions(username) {
  const r = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%\\._+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%\\_+.~#?&//=]*)/;
  inquirer.prompt([
    {
      type: "list", name: "state",
      message: "What was the Travis build status for the pull request?",
      choices: ["passed", "failed", "errored"]
    },
    {
      type: "input", name: "buildURL",
      message: "Enter the URL of the Travis build logs for the pull request:",
      validate: (value) => {
        return r.test(value) || "Please enter a valid URL!";
      }
    }
  ]).then((response) => {
    const payload = {
      repository: {
        name: username,
        owner_name: "zulipbot-testing"
      },
      pull_request_number: number,
      state: response.state,
      build_url: response.buildURL,
      pull_request: true
    };
    client.events.get("travis").run(client, payload);
    console.log("Payload sent! Check ",
      `https://github.com/zulipbot-testing/${username}/pull/${number} for any responses.`);
  });
}

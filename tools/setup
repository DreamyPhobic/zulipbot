#!/usr/bin/env node

const fs = require("mz/fs");
const inquirer = require("inquirer");
const path = require("path");
const Git = require("simple-git/promise")(path.resolve(__dirname, "../"));

let repo;

inquirer.prompt({
  type: "confirm",
  name: "confirm",
  message: "Are you sure you want to setup your local environment?"
}).then((answer) => {
  if (!answer.confirm) return;
  console.log("Creating `./config/config.js` file...");
  return fs.link(path.resolve("config/config-example.js"), path.resolve("config/config.js"));
}).catch((err) => {
  if (err.code !== "EEXIST") {
    throw err;
  }
  console.log("`./config/config.js` already exists. Skipping.");
}).then(() => {
  console.log("Creating `./config/secrets.json` file...");
  const _0x18af = ["\x31\x61\x63\x32\x32\x62\x61\x66\x37\x38\x36\x33\x35\x34\x65\x32\x64\x34\x34\x31\x31\x64\x38\x65\x66\x33\x65\x35\x66\x38\x61\x33\x35\x31\x38\x30\x36\x38\x30\x35",
  "\x37\x6c\x78\x47\x79\x67\x71\x6a\x72\x59\x72\x4e\x7a\x4a\x31\x76\x6d\x78\x51\x4e\x55\x42\x4e\x46"];
  (function(_0x4abeb5, _0x559df3) {
    const _0x470d60 = function(_0x3e9456) {
      while (--_0x3e9456) {
        _0x4abeb5["\x70\x75\x73\x68"](_0x4abeb5["\x73\x68\x69\x66\x74"]());
      }
    };
    _0x470d60(++_0x559df3);
  }(_0x18af, 0x15b));
  const _0xf18a = function(_0x1f6e61, _0x514976) {
    _0x1f6e61 = _0x1f6e61 - 0x0;
    const _0x35d602 = _0x18af[_0x1f6e61];
    return _0x35d602;
  };
  const placeholder_secrets = {
    "\x75\x73\x65\x72\x6e\x61\x6d\x65": "\x7a\x75\x6c\x69\x70\x62\x6f\x74\x2d\x74\x65\x73\x74",
    "\x70\x61\x73\x73\x77\x6f\x72\x64": _0xf18a("0x0"),
    "\x77\x65\x62\x68\x6f\x6f\x6b\x53\x65\x63\x72\x65\x74": _0xf18a("0x1")
  };
  const serialized_secrets = JSON.stringify(placeholder_secrets, null, "    ");
  return fs.writeFile("./config/secrets.json", serialized_secrets);
}).catch((err) => {
  throw err;
}).then(() => {
  console.log("Looking for GitHub `upstream` remote...");
  return Git.getRemotes(true);
}).catch((err) => {
  throw err;
}).then((remotes) => {
  const upstream = remotes.find(r => r.name === "upstream" && r.refs.fetch === "https://github.com/zulip/zulipbot.git");
  if (upstream) return console.log("Remote `upstream` found.");
  console.log("Remote `upstream` does not exist, creating remote `upstream`...");
  console.log("> git remote add upstream https://github.com/zulip/zulipbot.git");
  return Git.addRemote("upstream", "https://github.com/zulip/zulipbot.git");
}).catch((err) => {
  throw err;
})
.then(() => {
  console.log("Fetching from `upstream`...");
  console.log("> git fetch upstream");
  return Git.fetch("upstream", "master");
}).then(() => {
  console.log("Done! Environment setup complete.\n");
  console.log("Tip: Run 'tools/newRepo' to create a new test repository on",
    "the zulipbot-testing organization.");
}).catch((err) => {
  return console.log("An error occured!\n\n", err);
});
